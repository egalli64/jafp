/*
 * Introduction to Functional Programming with Java
 * 
 * https://github.com/egalli64/jafp
 */
package com.example.jafun.s05;

import java.util.Collection;
import java.util.TreeSet;
import java.util.function.Supplier;

/**
 * HOF, lambda and record / JavaBean working together to generate a collection
 */
public class NewAsMethodReference {
    private static Dog[] dogs = { new Dog("Tom"), new Dog("Bob"), new Dog("Kim"), new Dog("Wim") };
    private static BeanDog[] bDogs = { new BeanDog("Tom"), new BeanDog("Bob"), new BeanDog("Kim"), new BeanDog("Wim") };

    /**
     * A HOF that gets a supplier by functional interface, and add to it a few
     * objects - record based
     * 
     * @param supplier a dog collection
     * @return the populated collection
     */
    public static Collection<Dog> get(Supplier<Collection<Dog>> supplier) {
        Collection<Dog> result = supplier.get();
        for (Dog dog : dogs) {
            result.add(dog);
        }

        return result;
    }

    /**
     * A HOF that gets a supplier by functional interface, and add to it a few
     * objects - JavaBean based
     * 
     * @param supplier a dog collection
     * @return the populated collection
     */
    public static Collection<BeanDog> bGet(Supplier<Collection<BeanDog>> supplier) {
        Collection<BeanDog> result = supplier.get();
        for (BeanDog dog : bDogs) {
            result.add(dog);
        }

        return result;
    }

    /**
     * Get a dog populated collection from the NewAsMethodReference::get HOF. The
     * actual collection object is generated by the passed lambda. Then, print the
     * dogs (records vs beans).
     * 
     * @param args not used
     */
    public static void main(String[] args) {
        System.out.println("Sorting and printing dogs");
        Collection<Dog> sortedDogs = NewAsMethodReference.get(TreeSet::new);
        System.out.println("\nRecord dogs");
        sortedDogs.forEach(System.out::println);

        Collection<BeanDog> sortedBDogs = NewAsMethodReference.bGet(TreeSet::new);
        System.out.println("\nBean dogs");
        sortedBDogs.forEach(System.out::println);
    }
}
